name: CD - Build and Deploy

on:
  push:
    branches: [main]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    name: Deploy to Production VM
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/main'

    # Add environment variables at job level for better debugging
    env:
      VM_HOST: ${{ secrets.VM_HOST }}
      VM_USERNAME: ${{ secrets.VM_USERNAME }}
      VM_SSH_PRIVATE_KEY: ${{ secrets.VM_SSH_PRIVATE_KEY }}
      DJANGO_SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY }}
      ALLOWED_HOSTS: ${{ secrets.ALLOWED_HOSTS }}
      DATABASE_NAME: ${{ secrets.DATABASE_NAME }}
      DATABASE_USERNAME: ${{ secrets.VM_USERNAME }}
      DATABASE_PASSWORD: ${{ secrets.DATABASE_PASSWORD }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup SSH key and test connection
        run: |
          # Setup SSH directory and key
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh

          # Setup SSH private key
          echo "$VM_SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

          # Add host to known hosts
          ssh-keyscan -H "$VM_HOST" >> ~/.ssh/known_hosts
          chmod 644 ~/.ssh/known_hosts

      - name: Create production environment file
        run: |
          echo "Creating .env.prod file"
          {
            echo "# Django Settings"
            echo "DEBUG=False"
            echo "SECRET_KEY=${DJANGO_SECRET_KEY}"
            echo "ALLOWED_HOSTS=${ALLOWED_HOSTS}"
            echo ""
            echo "# Database Configuration"
            echo "DATABASE_NAME=${DATABASE_NAME}"
            echo "DATABASE_USERNAME=${DATABASE_USERNAME}"
            echo "DATABASE_PASSWORD=${DATABASE_PASSWORD}"
            echo ""
            echo "DATABASE_URL=postgresql://${DATABASE_USERNAME}:${DATABASE_PASSWORD}@db:5432/${DATABASE_NAME}"
            echo ""
            echo "# GitHub Container Registry"
            echo "GITHUB_REPOSITORY=${{ github.repository }}"
            echo ""
            echo "# Nginx Configuration"
            echo "NGINX_PORT=80"
          } > .env.prod

          echo "Environment file created"
          echo "Environment file contents (secrets masked):"
          sed 's/SECRET_KEY=.*/SECRET_KEY=***MASKED***/g; s/DATABASE_PASSWORD=.*/DATABASE_PASSWORD=***MASKED***/g' .env.prod

      - name: Ensure destination directories exist with proper permissions
        run: |
          ssh -i ~/.ssh/id_rsa \
            "$VM_USERNAME@$VM_HOST" \
            'sudo mkdir -p /opt/django-boards /opt/django-boards/infra /opt/django-boards/infra/nginx &&
             sudo mkdir -p /opt/django-boards/data/static /opt/django-boards/data/postgres /opt/django-boards/data/ssl /opt/django-boards/logs &&
             sudo chown -R $USER:$USER /opt/django-boards &&
             sudo chmod -R 755 /opt/django-boards &&
             sudo chown 1000:1000 /opt/django-boards/data/static &&
             sudo chown 999:999 /opt/django-boards/data/postgres &&
             sudo chmod 777 /opt/django-boards/data/static &&
             sudo chmod 777 /opt/django-boards/data/postgres &&
             sudo chmod 755 /opt/django-boards/data/ssl &&
             sudo chmod 755 /opt/django-boards/logs'

      - name: Copy deployment files to VM
        run: |
          echo "Copying deployment files:"

          # Copy main deployment files
          scp -i ~/.ssh/id_rsa -v \
            docker-compose.prod.yml \
            "$VM_USERNAME@$VM_HOST:/opt/django-boards/"

          scp -i ~/.ssh/id_rsa -v \
            infra/scripts/deploy.sh \
            "$VM_USERNAME@$VM_HOST:/opt/django-boards/"

          scp -i ~/.ssh/id_rsa -v \
            .env.prod \
            "$VM_USERNAME@$VM_HOST:/opt/django-boards/"

          scp -i ~/.ssh/id_rsa -v \
            infra/nginx/Dockerfile \
            "$VM_USERNAME@$VM_HOST:/opt/django-boards/infra/nginx/"

          scp -i ~/.ssh/id_rsa -v \
            infra/nginx/nginx.conf \
            "$VM_USERNAME@$VM_HOST:/opt/django-boards/infra/nginx/"

          echo "All files copied successfully!"

      - name: Set proper file permissions on VM
        run: |
          ssh -i ~/.ssh/id_rsa \
            "$VM_USERNAME@$VM_HOST" \
            'echo "Setting file permissions..." &&
             chmod +x /opt/django-boards/deploy.sh &&
             chmod 644 /opt/django-boards/.env.prod &&
             chmod 644 /opt/django-boards/docker-compose.prod.yml &&
             chmod 644 /opt/django-boards/infra/nginx/Dockerfile &&
             chmod 644 /opt/django-boards/infra/nginx/nginx.conf &&
             echo "File permissions set"'

      - name: Login to Container Registry on VM
        run: |
          ssh -i ~/.ssh/id_rsa \
            "$VM_USERNAME@$VM_HOST" \
            "echo '$GITHUB_TOKEN' | docker login ghcr.io -u ${{ github.actor }} --password-stdin"

      - name: Verify Docker volume mount directories
        run: |
          ssh -i ~/.ssh/id_rsa \
            "$VM_USERNAME@$VM_HOST" \
            'echo "Verifying Docker volume mount directories..." &&
             ls -la /opt/django-boards/data/static &&
             ls -la /opt/django-boards/data/postgres &&
             ls -la /opt/django-boards/data/ssl &&
             ls -la /opt/django-boards/logs &&
             echo "All volume mount directories verified"'

      - name: Clear and fix data directory permissions
        run: |
          ssh -i ~/.ssh/id_rsa  \
            "$VM_USERNAME@$VM_HOST" \
            'echo "Clearing data directories to avoid permission conflicts..." &&
             sudo rm -rf /opt/django-boards/data/static/* &&
             sudo rm -rf /opt/django-boards/data/postgres/* &&
             echo "Setting proper ownership for data directories..." &&
             sudo chown -R 1000:1000 /opt/django-boards/data/static &&
             sudo chown -R 999:999 /opt/django-boards/data/postgres &&
             sudo chmod -R 777 /opt/django-boards/data/static &&
             sudo chmod -R 777 /opt/django-boards/data/postgres &&
             echo "Data directories cleared and permissions fixed"'

      - name: Deploy application
        run: |
          ssh -i ~/.ssh/id_rsa \
            "$VM_USERNAME@$VM_HOST" \
            'cd /opt/django-boards && ./deploy.sh'

      - name: Cleanup
        if: always()
        run: |
          rm -f ~/.ssh/id_rsa .env.prod
