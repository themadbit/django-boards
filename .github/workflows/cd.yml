name: CD - Build and Deploy

# on pr for faster feedback

on:
  pull_request:
    branches: [ main ]
  workflow_dispatch:

# on:
#   push:
#     branches: [ main ]
#   workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy:
    name: Deploy to Production VM
    runs-on: ubuntu-latest
    needs: build-and-push
    # if: github.ref == 'refs/heads/main'

    # Add environment variables at job level for better debugging
    env:
      VM_HOST: ${{ secrets.VM_HOST }}
      VM_USERNAME: ${{ secrets.VM_USERNAME }}
      VM_SSH_PRIVATE_KEY: ${{ secrets.VM_SSH_PRIVATE_KEY }}
      DJANGO_SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY }}
      ALLOWED_HOSTS: ${{ secrets.ALLOWED_HOSTS }}
      DATABASE_NAME: ${{ secrets.DATABASE_NAME }}
      DATABASE_USERNAME: ${{ secrets.VM_USERNAME }}
      DATABASE_PASSWORD: ${{ secrets.DATABASE_PASSWORD }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Debug - Check if secrets are available
      run: |
        echo "Checking secrets availability..."
        echo "VM_HOST: $(if [ -n "$VM_HOST" ]; then echo "‚úÖ Set"; else echo "‚ùå Not set"; fi)"
        echo "VM_USERNAME: $(if [ -n "$VM_USERNAME" ]; then echo "‚úÖ Set"; else echo "‚ùå Not set"; fi)"
        echo "VM_SSH_PRIVATE_KEY: $(if [ -n "$VM_SSH_PRIVATE_KEY" ]; then echo "‚úÖ Set (${#VM_SSH_PRIVATE_KEY} chars)"; else echo "‚ùå Not set"; fi)"
        echo "DJANGO_SECRET_KEY: $(if [ -n "$DJANGO_SECRET_KEY" ]; then echo "‚úÖ Set"; else echo "‚ùå Not set"; fi)"
        echo "DATABASE_NAME: $(if [ -n "$DATABASE_NAME" ]; then echo "‚úÖ Set"; else echo "‚ùå Not set"; fi)"
        echo "DATABASE_USERNAME: $(if [ -n "$DATABASE_USERNAME" ]; then echo "‚úÖ Set"; else echo "‚ùå Not set"; fi)"
        echo "DATABASE_PASSWORD: $(if [ -n "$DATABASE_PASSWORD" ]; then echo "‚úÖ Set"; else echo "‚ùå Not set"; fi)"

    - name: Setup SSH key and test connection
      run: |
        # Setup SSH directory and key
        mkdir -p ~/.ssh
        chmod 700 ~/.ssh

        # Setup SSH private key
        echo "$VM_SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa

        # Add host to known hosts
        ssh-keyscan -H "$VM_HOST" >> ~/.ssh/known_hosts
        chmod 644 ~/.ssh/known_hosts

        # Test network connectivity
        echo "Testing network connectivity to VM..."
        ping -c 3 "$VM_HOST" || echo "‚ö†Ô∏è  Ping failed, but SSH might still work"

        # Test SSH connection
        echo "Testing SSH connection..."
        ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no -o ConnectTimeout=10 \
          "$VM_USERNAME@$VM_HOST" \
          'echo "‚úÖ SSH connection successful" && whoami && pwd'

    - name: Create production environment file
      run: |
        echo "Creating .env.prod file..."
        {
          echo "# Django Settings"
          echo "DEBUG=False"
          echo "SECRET_KEY=${DJANGO_SECRET_KEY}"
          echo "ALLOWED_HOSTS=${ALLOWED_HOSTS}"
          echo ""
          echo "# Database Configuration"
          echo "DATABASE_NAME=${DATABASE_NAME}"
          echo "DATABASE_USERNAME=${DATABASE_USERNAME}"
          echo "DATABASE_PASSWORD=${DATABASE_PASSWORD}"
          echo ""
          echo "DATABASE_URL=postgresql://${DATABASE_USERNAME}:${DATABASE_PASSWORD}@db:5432/${DATABASE_NAME}"
          echo ""
          echo "# GitHub Container Registry"
          echo "GITHUB_REPOSITORY=${{ github.repository }}"
          echo ""
          echo "# Nginx Configuration"
          echo "NGINX_PORT=80"
        } > .env.prod

        echo "‚úÖ Environment file created"
        echo "üîç Environment file contents (secrets masked):"
        sed 's/SECRET_KEY=.*/SECRET_KEY=***MASKED***/g; s/DATABASE_PASSWORD=.*/DATABASE_PASSWORD=***MASKED***/g' .env.prod

        # Verify critical variables are not empty
        if grep -q "SECRET_KEY=$" .env.prod; then
          echo "‚ùå Error: SECRET_KEY is empty in .env.prod"
          exit 1
        fi

        if grep -q "GITHUB_REPOSITORY=$" .env.prod; then
          echo "‚ùå Error: GITHUB_REPOSITORY is empty in .env.prod"
          exit 1
        fi

        echo "‚úÖ Environment file validation passed"

    - name: Verify local files exist before copying
      run: |
        echo "Checking if required files exist locally..."

        files_to_check=(
          "docker-compose.prod.yml"
          "scripts/deploy.sh"
          ".env.prod"
          "infra/nginx/Dockerfile"
          "infra/nginx/nginx.conf"
        )

        missing_files=0
        for file in "${files_to_check[@]}"; do
          if [ -f "$file" ]; then
            echo "‚úÖ $file exists"
          else
            echo "‚ùå $file is missing"
            missing_files=$((missing_files + 1))
          fi
        done

        if [ $missing_files -gt 0 ]; then
          echo "‚ùå $missing_files files are missing. Cannot proceed with deployment."
          exit 1
        fi

        echo "‚úÖ All required files are present"

    - name: Ensure destination directories exist with proper permissions
      run: |
        ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no \
          "$VM_USERNAME@$VM_HOST" \
          'sudo mkdir -p /opt/django-boards /opt/django-boards/infra /opt/django-boards/infra/nginx &&
           sudo mkdir -p /opt/django-boards/data/static /opt/django-boards/data/postgres /opt/django-boards/data/ssl /opt/django-boards/logs &&
           sudo chown -R $USER:$USER /opt/django-boards &&
           sudo chmod -R 755 /opt/django-boards &&
           sudo chown 1000:1000 /opt/django-boards/data/static &&
           sudo chown 999:999 /opt/django-boards/data/postgres &&
           sudo chmod 777 /opt/django-boards/data/static &&
           sudo chmod 777 /opt/django-boards/data/postgres &&
           sudo chmod 755 /opt/django-boards/data/ssl &&
           sudo chmod 755 /opt/django-boards/logs &&
           echo "‚úÖ Directory permissions set" &&
           echo "üìÅ Directory details:" &&
           ls -la /opt/ | grep django-boards &&
           echo "üîç User can write to directory:" &&
           test -w /opt/django-boards && echo "‚úÖ Write permission confirmed" || echo "‚ùå No write permission" &&
           echo "" &&
           echo "üìÅ Data directories created:" &&
           ls -la /opt/django-boards/data/ &&
           echo "‚úÖ All required directories created"'

    - name: Copy deployment files to VM
      run: |
        echo "Copying deployment files..."

        # Copy main deployment files
        echo "üìÅ Copying docker-compose.prod.yml..."
        scp -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no -v \
          docker-compose.prod.yml \
          "$VM_USERNAME@$VM_HOST:/opt/django-boards/"

        echo "üìÅ Copying deploy.sh script..."
        scp -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no -v \
          scripts/deploy.sh \
          "$VM_USERNAME@$VM_HOST:/opt/django-boards/"

        echo "üìÅ Copying environment file..."
        scp -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no -v \
          .env.prod \
          "$VM_USERNAME@$VM_HOST:/opt/django-boards/"

        echo "üìÅ Copying nginx configuration files..."
        scp -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no -v \
          infra/nginx/Dockerfile \
          "$VM_USERNAME@$VM_HOST:/opt/django-boards/infra/nginx/"

        scp -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no -v \
          infra/nginx/nginx.conf \
          "$VM_USERNAME@$VM_HOST:/opt/django-boards/infra/nginx/"

        echo "‚úÖ All files copied successfully"

    - name: Verify files were copied successfully
      run: |
        echo "Verifying files on remote server..."
        ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no \
          "$VM_USERNAME@$VM_HOST" \
          'echo "üìÅ Contents of /opt/django-boards/:" &&
           ls -la /opt/django-boards/ &&
           echo "" &&
           echo "üìÅ Contents of /opt/django-boards/infra/:" &&
           ls -la /opt/django-boards/infra/ &&
           echo "" &&
           echo "üìÅ Contents of /opt/django-boards/infra/nginx/:" &&
           ls -la /opt/django-boards/infra/nginx/ &&
           echo "" &&
           echo "üîç Checking file sizes:" &&
           find /opt/django-boards -type f -exec ls -lh {} \; &&
           echo "" &&
           echo "üåê Verifying nginx build context:" &&
           test -f /opt/django-boards/infra/nginx/Dockerfile && echo "‚úÖ nginx Dockerfile exists" || echo "‚ùå nginx Dockerfile missing" &&
           test -f /opt/django-boards/infra/nginx/nginx.conf && echo "‚úÖ nginx.conf exists" || echo "‚ùå nginx.conf missing"'

    - name: Set proper file permissions on VM
      run: |
        ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no \
          "$VM_USERNAME@$VM_HOST" \
          'echo "Setting file permissions..." &&
           chmod +x /opt/django-boards/deploy.sh &&
           chmod 644 /opt/django-boards/.env.prod &&
           chmod 644 /opt/django-boards/docker-compose.prod.yml &&
           chmod 644 /opt/django-boards/infra/nginx/Dockerfile &&
           chmod 644 /opt/django-boards/infra/nginx/nginx.conf &&
           echo "‚úÖ File permissions set" &&
           ls -la /opt/django-boards/'

    - name: Login to Container Registry on VM
      run: |
        ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no \
          "$VM_USERNAME@$VM_HOST" \
          "echo '$GITHUB_TOKEN' | docker login ghcr.io -u ${{ github.actor }} --password-stdin"

    - name: Verify Docker volume mount directories
      run: |
        ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no \
          "$VM_USERNAME@$VM_HOST" \
          'echo "üîç Verifying Docker volume mount directories..." &&
           echo "üìÅ Static files directory:" &&
           ls -la /opt/django-boards/data/static &&
           echo "üìÅ PostgreSQL data directory:" &&
           ls -la /opt/django-boards/data/postgres &&
           echo "üìÅ SSL certificates directory:" &&
           ls -la /opt/django-boards/data/ssl &&
           echo "üìÅ Logs directory:" &&
           ls -la /opt/django-boards/logs &&
           echo "‚úÖ All volume mount directories verified"'

    - name: Clear and fix data directory permissions
      run: |
        ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no \
          "$VM_USERNAME@$VM_HOST" \
          'echo "üßπ Clearing data directories to avoid permission conflicts..." &&
           sudo rm -rf /opt/django-boards/data/static/* &&
           sudo rm -rf /opt/django-boards/data/postgres/* &&
           echo "üîß Setting proper ownership for data directories..." &&
           sudo chown -R 1000:1000 /opt/django-boards/data/static &&
           sudo chown -R 999:999 /opt/django-boards/data/postgres &&
           sudo chmod -R 777 /opt/django-boards/data/static &&
           sudo chmod -R 777 /opt/django-boards/data/postgres &&
           echo "‚úÖ Data directories cleared and permissions fixed"'

    - name: Deploy application
      run: |
        ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no \
          "$VM_USERNAME@$VM_HOST" \
          'cd /opt/django-boards && ./deploy.sh'

    - name: Health check
      run: |
        echo "Waiting for application to start..."
        sleep 30

        # Check if services are running
        ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no \
          "$VM_USERNAME@$VM_HOST" \
          'docker compose -f /opt/django-boards/docker-compose.prod.yml ps'

        # Test HTTP endpoint
        curl -f --retry 5 --retry-delay 10 --retry-connrefused \
          "http://$VM_HOST/" || {
          echo "Health check failed!"
          exit 1
        }

        echo "Application is healthy and responding!"

    - name: Cleanup
      if: always()
      run: |
        rm -f ~/.ssh/id_rsa .env.prod
