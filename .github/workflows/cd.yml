name: CD - Build and Deploy

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy:
    name: Deploy to Production VM
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup SSH key
      run: |
        # Validate SSH secrets
        if [ -z "${{ secrets.VM_HOST }}" ]; then
          echo "❌ Error: VM_HOST secret is not set"
          exit 1
        fi

        if [ -z "${{ secrets.VM_SSH_PRIVATE_KEY }}" ]; then
          echo "❌ Error: VM_SSH_PRIVATE_KEY secret is not set"
          exit 1
        fi

        # Setup SSH
        mkdir -p ~/.ssh
        echo "${{ secrets.VM_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H ${{ secrets.VM_HOST }} >> ~/.ssh/known_hosts

    - name: Create production environment file
      run: |
        cat > .env.prod << EOF
        # Django Settings
        DEBUG=False
        SECRET_KEY=${{ secrets.DJANGO_SECRET_KEY }}
        ALLOWED_HOSTS=${{ secrets.ALLOWED_HOSTS }}

        # Database Configuration
        DATABASE_NAME=${{ secrets.DATABASE_NAME }}
        DATABASE_USERNAME=${{ secrets.DATABASE_USERNAME }}
        DATABASE_PASSWORD=${{ secrets.DATABASE_PASSWORD }}

        DATABASE_URL=postgresql://${{ secrets.DATABASE_USERNAME }}:${{ secrets.DATABASE_PASSWORD }}@db:5432/${{ secrets.DATABASE_NAME }}

        # GitHub Container Registry
        GITHUB_REPOSITORY=${{ github.repository }}

        # Nginx Configuration
        NGINX_PORT=80
        EOF

    - name: Copy deployment files to VM
      run: |
        scp -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no \
          docker-compose.prod.yml \
          ${{ secrets.VM_USERNAME }}@${{ secrets.VM_HOST }}:/opt/django-boards/

        scp -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no \
          scripts/deploy.sh \
          ${{ secrets.VM_USERNAME }}@${{ secrets.VM_HOST }}:/opt/django-boards/

        scp -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no \
          .env.prod \
          ${{ secrets.VM_USERNAME }}@${{ secrets.VM_HOST }}:/opt/django-boards/

        scp -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no \
          infra/django-boards.service \
          ${{ secrets.VM_USERNAME }}@${{ secrets.VM_HOST }}:/opt/django-boards/infra/

    - name: Create directories and set permissions on VM
      run: |
        ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no \
          ${{ secrets.VM_USERNAME }}@${{ secrets.VM_HOST }} \
          'mkdir -p /opt/django-boards/infra && chmod +x /opt/django-boards/deploy.sh'

    - name: Login to Container Registry on VM
      run: |
        ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no \
          ${{ secrets.VM_USERNAME }}@${{ secrets.VM_HOST }} \
          'echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin'

    - name: Deploy application
      run: |
        ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no \
          ${{ secrets.VM_USERNAME }}@${{ secrets.VM_HOST }} \
          'cd /opt/django-boards && ./deploy.sh'

    - name: Health check
      run: |
        echo "Waiting for application to start!"
        sleep 30

        # Check if services are running
        ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no \
          ${{ secrets.VM_USERNAME }}@${{ secrets.VM_HOST }} \
          'docker compose -f /opt/django-boards/docker-compose.prod.yml ps'

        # Test HTTP endpoint
        curl -f --retry 5 --retry-delay 10 --retry-connrefused \
          http://${{ secrets.VM_HOST }}/ || {
          echo "Health check failed!"
          exit 1
        }

        echo "Application is healthy and responding!"

    - name: Cleanup
      if: always()
      run: |
        rm -f ~/.ssh/id_rsa .env.prod
